// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Full Version"

// DATE "06/21/2025 17:02:47"

// 
// Device: Altera EP4CGX15BF14C6 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module shuma (
	state,
	seg);
input 	[1:0] state;
output 	[6:0] seg;

// Design Ports Information
// seg[0]	=>  Location: PIN_L12,	 I/O Standard: 2.5 V,	 Current Strength: Default
// seg[1]	=>  Location: PIN_M4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// seg[2]	=>  Location: PIN_L5,	 I/O Standard: 2.5 V,	 Current Strength: Default
// seg[3]	=>  Location: PIN_N6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// seg[4]	=>  Location: PIN_K9,	 I/O Standard: 2.5 V,	 Current Strength: Default
// seg[5]	=>  Location: PIN_M6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// seg[6]	=>  Location: PIN_L7,	 I/O Standard: 2.5 V,	 Current Strength: Default
// state[1]	=>  Location: PIN_K11,	 I/O Standard: 2.5 V,	 Current Strength: Default
// state[0]	=>  Location: PIN_L9,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \seg[0]~output_o ;
wire \seg[1]~output_o ;
wire \seg[2]~output_o ;
wire \seg[3]~output_o ;
wire \seg[4]~output_o ;
wire \seg[5]~output_o ;
wire \seg[6]~output_o ;
wire \state[1]~input_o ;
wire \state[0]~input_o ;
wire \Decoder0~0_combout ;
wire \Decoder0~1_combout ;


// Location: IOOBUF_X33_Y12_N2
cycloneiv_io_obuf \seg[0]~output (
	.i(\state[1]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \seg[0]~output .bus_hold = "false";
defparam \seg[0]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X8_Y0_N2
cycloneiv_io_obuf \seg[1]~output (
	.i(!\Decoder0~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \seg[1]~output .bus_hold = "false";
defparam \seg[1]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X14_Y0_N9
cycloneiv_io_obuf \seg[2]~output (
	.i(!\state[0]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \seg[2]~output .bus_hold = "false";
defparam \seg[2]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X12_Y0_N2
cycloneiv_io_obuf \seg[3]~output (
	.i(!\state[0]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \seg[3]~output .bus_hold = "false";
defparam \seg[3]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X22_Y0_N2
cycloneiv_io_obuf \seg[4]~output (
	.i(!\state[1]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \seg[4]~output .bus_hold = "false";
defparam \seg[4]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X12_Y0_N9
cycloneiv_io_obuf \seg[5]~output (
	.i(!\Decoder0~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \seg[5]~output .bus_hold = "false";
defparam \seg[5]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X14_Y0_N2
cycloneiv_io_obuf \seg[6]~output (
	.i(!\state[0]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \seg[6]~output .bus_hold = "false";
defparam \seg[6]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X33_Y11_N1
cycloneiv_io_ibuf \state[1]~input (
	.i(state[1]),
	.ibar(gnd),
	.o(\state[1]~input_o ));
// synopsys translate_off
defparam \state[1]~input .bus_hold = "false";
defparam \state[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X24_Y0_N8
cycloneiv_io_ibuf \state[0]~input (
	.i(state[0]),
	.ibar(gnd),
	.o(\state[0]~input_o ));
// synopsys translate_off
defparam \state[0]~input .bus_hold = "false";
defparam \state[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X18_Y1_N0
cycloneiv_lcell_comb \Decoder0~0 (
// Equation(s):
// \Decoder0~0_combout  = (\state[0]~input_o ) # (\state[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\state[0]~input_o ),
	.datad(\state[1]~input_o ),
	.cin(gnd),
	.combout(\Decoder0~0_combout ),
	.cout());
// synopsys translate_off
defparam \Decoder0~0 .lut_mask = 16'hFFF0;
defparam \Decoder0~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X18_Y1_N26
cycloneiv_lcell_comb \Decoder0~1 (
// Equation(s):
// \Decoder0~1_combout  = (\state[0]~input_o  & \state[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\state[0]~input_o ),
	.datad(\state[1]~input_o ),
	.cin(gnd),
	.combout(\Decoder0~1_combout ),
	.cout());
// synopsys translate_off
defparam \Decoder0~1 .lut_mask = 16'hF000;
defparam \Decoder0~1 .sum_lutc_input = "datac";
// synopsys translate_on

assign seg[0] = \seg[0]~output_o ;

assign seg[1] = \seg[1]~output_o ;

assign seg[2] = \seg[2]~output_o ;

assign seg[3] = \seg[3]~output_o ;

assign seg[4] = \seg[4]~output_o ;

assign seg[5] = \seg[5]~output_o ;

assign seg[6] = \seg[6]~output_o ;

endmodule
